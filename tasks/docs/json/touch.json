{"main":["touch.js"],"options":[{"name":"axis","type":"string","default":"null","description":"Limit axis for pan and swipe; 'x' or 'y'"},{"name":"pan","type":"boolean","default":"false","description":"Pan events"},{"name":"scale","type":"boolean","default":"false","description":"Scale events"},{"name":"swipe","type":"boolean","default":"false","description":"Swipe events"}],"events":[{"name":"panstart","description":"Panning started"},{"name":"pan","description":"Panning"},{"name":"panend","description":"Panning ended"},{"name":"scalestart","description":"Scaling started"},{"name":"scale","description":"Scaling"},{"name":"scaleend","description":"Scaling ended"},{"name":"swipe","description":"Swipe"}],"methods":[{"name":"defaults","description":"Extends plugin default settings; effects instances created hereafter.","params":[{"name":"options","type":"object","default":"{}","description":"New plugin defaults"}],"examples":["$.touch(\"defaults\", { ... });"]},{"name":"destroy","description":"Removes plugin instance.","examples":["$(\".target\").touch(\"destroy\");"]}],"name":"Touch","type":"widget","description":"A jQuery plugin for multi-touch events.","dependencies":["jQuery","core.js"],"css":[{"name":".fs-touch-element","type":"element","description":"Target Element"}],"use":"### Basic\n\nTouch normalizes mouse and touch events in the context of a few basic gestures: `pan`, `swipe` and `scale`. It is up to the developer to utilize the events. Events emitted by Touch will contain the following extra properties:\n\n| Key | Description |\n| --- | --- |\n| `pageX` | Current X position |\n| `pageY` | Current Y position |\n| `deltaX` | Change in X position |\n| `deltaY` | Change in Y position |\n| `scale` | Current scale value |\n| `directionX` | Current X movement |\n| `directionY` | Current Y movement |\n\n### Pan\n\nPan can be used for building touch-friendly draggable interfaces:\n\n```javascript\n$(\".target\").touch({\n\tpan: true\n}).on(\"panstart\", function(e) {\n\tconsole.log(\"Started panning\");\n}).on(\"pan\", function(e) {\n\tconsole.log(\"Panning\");\n}).on(\"panend\", function(e) {\n\tconsole.log(\"Stopped panning\");\n});\n```\n\n### Swipe\n\nSwipe can be used for building touch-friendly swipable interfaces:\n\n```javascript\n$(\".target\").touch({\n\tswipe: true\n}).on(\"swipe\", function(e) {\n\tconsole.log(\"Swiped\");\n});\n```\n\n### Scale\n\nScale can be used for building touch-friendly scalable interfaces:\n\n```javascript\n$(\".target\").touch({\n\tscale: true\n}).on(\"scalestart\", function(e) {\n\tconsole.log(\"Started scaling\");\n}).on(\"scale\", function(e) {\n\tconsole.log(\"Scaling\");\n}).on(\"scaleend\", function(e) {\n\tconsole.log(\"Stopped scaling\");\n});\n```\n\nNote: `pan`, `swipe` and `scale` can also be used together to create a rich interface.","demo":"<h4>Manipulate</h4>\r\n\r\n<!-- START: FIRSTDEMO -->\r\n\r\n<style>\r\n\t.box { background: #00bcd4; color: #fff; text-align: center; }\r\n\r\n\t.container { background: #fff; border: 1px solid #455a64; height: 400px; margin: 20px 0; overflow: hidden; position: relative; width: 100%; }\r\n\r\n\t.register { height: 1px; left: 50%; position: absolute; top: 50%; width: 1px; }\r\n\t.box { height: 150px; line-height: 150px; left: -75px; position: absolute; top: -75px; width: 150px; }\r\n\r\n\t.swipe { background: gray; height: 100px; width: 100%; }\r\n</style>\r\n\r\n<script>\r\n\t$(function() {\r\n\t\tvar $targets = $(\".touch\"),\r\n\t\t\t_minX = 0,\r\n\t\t\t_minY = 0;\r\n\r\n/*\r\n\t\t$(\".swipe\").touch({\r\n\t\t\tswipe: true,\r\n\t\t\taxis: x\r\n\t\t}).on(\"swipe\", function(e) {\r\n\t\t\t$(this).html(e.directionX);\r\n\t\t});\r\n*/\r\n\r\n\t\t$targets.each(function() {\r\n\t\t\tvar $target = $(this),\r\n\t\t\t\tdata = {\r\n\t\t\t\t\t$container: $target.parents(\".container\"),\r\n\t\t\t\t\t$register:  $target.parents(\".register\")\r\n\t\t\t\t};\r\n\r\n\t\t\t$target.data(\"demo\", data);\r\n\t\t});\r\n\r\n\t\t// Pan\r\n\t\t$(\".pan\").touch({\r\n\t\t\tpan: true\r\n\t\t}).on(\"panstart\", function(e) {\r\n\t\t\tvar $target = $(this),\r\n\t\t\t\tdata = $target.data(\"demo\"),\r\n\t\t\t\toffset = data.$register.position();\r\n\r\n\t\t\tdata.origX = offset.left;\r\n\t\t\tdata.origY = offset.top;\r\n\r\n\t\t\tdata.diffWidth  = $target.outerWidth() / 2;\r\n\t\t\tdata.diffHeight = $target.outerHeight() / 2;\r\n\t\t})\r\n\t\t.on(\"panend\", function(e) {\r\n\t\t\t// ...\r\n\t\t});\r\n\r\n\t\t// Bubbling\r\n\r\n\t\t$(document).on(\"pan\", \".pan\", function(e) {\r\n\t\t\tvar $target = $(this),\r\n\t\t\t\tdata = $target.data(\"demo\"),\r\n\t\t\t\tx = data.origX + e.deltaX,\r\n\t\t\t\ty = data.origY + e.deltaY,\r\n\t\t\t\tminX = _minX + data.diffWidth,\r\n\t\t\t\tminY = _minY + data.diffHeight,\r\n\t\t\t\tmaxX = data.$container.outerWidth()  - minX - 2,\r\n\t\t\t\tmaxY = data.$container.outerHeight() - minY - 2;\r\n\r\n\t\t\tif (x < minX) {\r\n\t\t\t\tx = minX;\r\n\t\t\t}\r\n\t\t\tif (x > maxX) {\r\n\t\t\t\tx = maxX;\r\n\t\t\t}\r\n\t\t\tif (y < minY) {\r\n\t\t\t\ty = minY;\r\n\t\t\t}\r\n\t\t\tif (y > maxY) {\r\n\t\t\t\ty = maxY;\r\n\t\t\t}\r\n\r\n\t\t\tdata.$register.css({\r\n\t\t\t\tleft: x,\r\n\t\t\t\ttop:  y\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// Scale\r\n\t\t$(\".scale\").touch({\r\n\t\t\tscale: true\r\n\t\t}).on(\"scalestart\", function(e) {\r\n\t\t\tvar $target = $(this),\r\n\t\t\t\tdata = $target.data(\"demo\"),\r\n\t\t\t\toffset = $target.position();\r\n\r\n\t\t\tdata.origWidth  = $target.outerWidth();\r\n\t\t\tdata.origHeight = $target.outerHeight();\r\n\t\t})\r\n\t\t.on(\"scaleend\", function(e) {\r\n\t\t\t// ...\r\n\t\t})\r\n\t\t.on(\"scale\", function(e) {\r\n\t\t\tvar $target = $(this),\r\n\t\t\t\tdata = $target.data(\"demo\")\r\n\t\t\t\twidth  = data.origWidth  * e.scale,\r\n\t\t\t\theight = data.origHeight * e.scale,\r\n\t\t\t\tminWidth  = 150,\r\n\t\t\t\tminHeight = 150,\r\n\t\t\t\tmaxH = data.$container.outerHeight(),\r\n\t\t\t\tmaxW = data.$container.outerWidth(),\r\n\t\t\t\tmaxWidth  = (maxH > maxW) ? maxW : maxH,\r\n\t\t\t\tmaxHeight = (maxH > maxW) ? maxW : maxH;\r\n\r\n\t\t\tif (width < minWidth) {\r\n\t\t\t\twidth = minWidth;\r\n\t\t\t}\r\n\t\t\tif (width > maxWidth) {\r\n\t\t\t\twidth = maxWidth;\r\n\t\t\t}\r\n\r\n\t\t\tif (height < minHeight) {\r\n\t\t\t\theight = minHeight;\r\n\t\t\t}\r\n\t\t\tif (height > maxHeight) {\r\n\t\t\t\theight = maxHeight;\r\n\t\t\t}\r\n\r\n\t\t\t$target.css({\r\n\t\t\t\twidth:  width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tlineHeight: height + \"px\",\r\n\t\t\t\tleft: -(width / 2),\r\n\t\t\t\ttop:  -(height / 2)\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// Manipulate\r\n\t\t$(\".manipulate\").touch({\r\n\t\t\tpan: true,\r\n\t\t\tscale: true\r\n\t\t}).on(\"scalestart\", function(e) {\r\n\t\t\tvar $target = $(this),\r\n\t\t\t\tdata = $target.data(\"demo\"),\r\n\t\t\t\toffset = data.$register.position();\r\n\r\n\t\t\tdata.origX = offset.left;\r\n\t\t\tdata.origY = offset.top;\r\n\r\n\t\t\tdata.origWidth  = $target.outerWidth();\r\n\t\t\tdata.origHeight = $target.outerHeight();\r\n\t\t})\r\n\t\t.on(\"scaleend\", function(e) {\r\n\t\t\t// ...\r\n\t\t})\r\n\t\t.on(\"scale\", function(e) {\r\n\t\t\tvar $target = $(this),\r\n\t\t\t\tdata = $target.data(\"demo\")\r\n\t\t\t\twidth  = data.origWidth  * e.scale,\r\n\t\t\t\theight = data.origHeight * e.scale,\r\n\t\t\t\t// pan\r\n\t\t\t\tx = data.origX + e.deltaX,\r\n\t\t\t\ty = data.origY + e.deltaY,\r\n\t\t\t\tminX = _minX,\r\n\t\t\t\tminY = _minY,\r\n\t\t\t\tmaxX = data.$container.outerWidth()  - minX,\r\n\t\t\t\tmaxY = data.$container.outerHeight() - minY,\r\n\t\t\t\t// scale\r\n\t\t\t\tminWidth  = 150,\r\n\t\t\t\tminHeight = 150,\r\n\t\t\t\tmaxWidth = 600,\r\n\t\t\t\tmaxHeight = 600;\r\n\r\n\t\t\tif (x < minX) {\r\n\t\t\t\tx = minX;\r\n\t\t\t}\r\n\t\t\tif (x > maxX) {\r\n\t\t\t\tx = maxX;\r\n\t\t\t}\r\n\t\t\tif (y < minY) {\r\n\t\t\t\ty = minY;\r\n\t\t\t}\r\n\t\t\tif (y > maxY) {\r\n\t\t\t\ty = maxY;\r\n\t\t\t}\r\n\r\n\t\t\tdata.$register.css({\r\n\t\t\t\tleft: x,\r\n\t\t\t\ttop:  y\r\n\t\t\t});\r\n\r\n\t\t\tif (width < minWidth) {\r\n\t\t\t\twidth = minWidth;\r\n\t\t\t}\r\n\t\t\tif (width > maxWidth) {\r\n\t\t\t\twidth = maxWidth;\r\n\t\t\t}\r\n\r\n\t\t\tif (height < minHeight) {\r\n\t\t\t\theight = minHeight;\r\n\t\t\t}\r\n\t\t\tif (height > maxHeight) {\r\n\t\t\t\theight = maxHeight;\r\n\t\t\t}\r\n\r\n\t\t\t$target.css({\r\n\t\t\t\twidth:  width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tlineHeight: height + \"px\",\r\n\t\t\t\tleft: -(width / 2),\r\n\t\t\t\ttop:  -(height / 2)\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n</script>\r\n\r\n<div class=\"demo_container\">\r\n\t<div class=\"demo_example\">\r\n\t\t<div class=\"container\">\r\n\t\t\t<div class=\"register\">\r\n\t\t\t\t<div class=\"box touch manipulate\">Scale &amp; Pan</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"demo_code\">\r\n\t\t<pre><code class=\"language-html\">&lt;div class=&quot;touch_container&quot;&gt;\r\n&Tab;&lt;div class=&quot;touch_target&quot;&gt;Touch&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n\t\t<pre><code class=\"language-javascript\">$(\".touch_target\").touch({\r\n\tpan: true,\r\n\tscale: true\r\n}).on(\"panstart\", function(e) {\r\n\t// Handle pan start\r\n\t// Cache positions, etc...\r\n}).on(\"panend\", function(e) {\r\n\t// Handle pan end\r\n\t// Clean up data...\r\n}).on(\"pan\", function(e) {\r\n\tvar deltaX  = e.deltaX,\r\n\t\tdeltaY  = e.deltaY;\r\n\r\n\t// React to pan...\r\n}).on(\"scalestart\", function(e) {\r\n\t// Handle scale start\r\n\t// Cache positions, etc...\r\n}).on(\"scaleend\", function(e) {\r\n\t// Handle touch end\r\n\t// Clean up data...\r\n}).on(\"scale\", function(e) {\r\n\tvar scale   = e.scale,\r\n\t\tdeltaX  = e.deltaX,\r\n\t\tdeltaY  = e.deltaY;\r\n\r\n\t// React to scale and pan...\r\n});</code></pre>\r\n\t</div>\r\n</div>\r\n\r\n<!-- END: FIRSTDEMO -->\r\n\r\n<h4>Pan</h4>\r\n<div class=\"demo_container\">\r\n\t<div class=\"demo_example\">\r\n\t\t<div class=\"container\">\r\n\t\t\t<div class=\"register\">\r\n\t\t\t\t<div class=\"box touch pan\">Pan</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"demo_code\">\r\n\t\t<pre><code class=\"language-html\">&lt;div class=&quot;touch_container&quot;&gt;\r\n&Tab;&lt;div class=&quot;touch_target&quot;&gt;Touch&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n\t\t<pre><code class=\"language-javascript\">$(\".touch_target\").touch({\r\n\tpan: true\r\n}).on(\"panstart\", function(e) {\r\n\t// Handle pan start\r\n\t// Cache positions, etc...\r\n}).on(\"panend\", function(e) {\r\n\t// Handle pan end\r\n\t// Clean up data...\r\n}).on(\"pan\", function(e) {\r\n\tvar deltaX = e.deltaX,\r\n\t\tdeltaY = e.deltaY;\r\n\r\n\t// React to pan...\r\n});</code></pre>\r\n\t</div>\r\n</div>\r\n\r\n<h4>Scale</h4>\r\n<div class=\"demo_container\">\r\n\t<div class=\"demo_example\">\r\n\t\t<div class=\"container\">\r\n\t\t\t<div class=\"register\">\r\n\t\t\t\t<div class=\"box touch scale\">Scale</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"demo_code\">\r\n\t\t<pre><code class=\"language-html\">&lt;div class=&quot;touch_container&quot;&gt;\r\n&Tab;&lt;div class=&quot;touch_target&quot;&gt;Touch&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n\t\t<pre><code class=\"language-javascript\">$(\".touch_target\").touch({\r\n\tscale: true\r\n}).on(\"scalestart\", function(e) {\r\n\t// Handle scale start\r\n\t// Cache positions, etc...\r\n}).on(\"scaleend\", function(e) {\r\n\t// Handle touch end\r\n\t// Clean up data...\r\n}).on(\"scale\", function(e) {\r\n\tvar scale = e.scale;\r\n\r\n\t// React to scale...\r\n});</code></pre>\r\n\t</div>\r\n</div>\r\n","document":"# Touch\n\nA jQuery plugin for multi-touch events.\n\n<!-- HEADER END -->\n\n<!-- NAV START -->\n\n* [Use](#use)\n* [Options](#options)\n* [Events](#events)\n* [Methods](#methods)\n* [CSS](#css)\n\n<!-- NAV END -->\n\n<!-- DEMO BUTTON -->\n\n## <a name=\"use\"></a> Using Touch\n\n\n#### Main\n\n```markup\ntouch.js\n```\n\n\n#### Dependencies\n\n```markup\njQuery\ncore.js\n```\n\n### Basic\n\nTouch normalizes mouse and touch events in the context of a few basic gestures: `pan`, `swipe` and `scale`. It is up to the developer to utilize the events. Events emitted by Touch will contain the following extra properties:\n\n| Key | Description |\n| --- | --- |\n| `pageX` | Current X position |\n| `pageY` | Current Y position |\n| `deltaX` | Change in X position |\n| `deltaY` | Change in Y position |\n| `scale` | Current scale value |\n| `directionX` | Current X movement |\n| `directionY` | Current Y movement |\n\n### Pan\n\nPan can be used for building touch-friendly draggable interfaces:\n\n```javascript\n$(\".target\").touch({\n\tpan: true\n}).on(\"panstart\", function(e) {\n\tconsole.log(\"Started panning\");\n}).on(\"pan\", function(e) {\n\tconsole.log(\"Panning\");\n}).on(\"panend\", function(e) {\n\tconsole.log(\"Stopped panning\");\n});\n```\n\n### Swipe\n\nSwipe can be used for building touch-friendly swipable interfaces:\n\n```javascript\n$(\".target\").touch({\n\tswipe: true\n}).on(\"swipe\", function(e) {\n\tconsole.log(\"Swiped\");\n});\n```\n\n### Scale\n\nScale can be used for building touch-friendly scalable interfaces:\n\n```javascript\n$(\".target\").touch({\n\tscale: true\n}).on(\"scalestart\", function(e) {\n\tconsole.log(\"Started scaling\");\n}).on(\"scale\", function(e) {\n\tconsole.log(\"Scaling\");\n}).on(\"scaleend\", function(e) {\n\tconsole.log(\"Stopped scaling\");\n});\n```\n\nNote: `pan`, `swipe` and `scale` can also be used together to create a rich interface.\n\n\n## <a name=\"options\"></a> Options\n\nSet instance options by passing a valid object at initialization, or to the public `defaults` method. Custom options for a specific instance can also be set by attaching a `data-touch-options` attribute to the target elment. This attribute should contain the properly formatted JSON object representing the custom options.\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| `axis` | `string` | `null` | Limit axis for pan and swipe; 'x' or 'y' |\n| `pan` | `boolean` | `false` | Pan events |\n| `scale` | `boolean` | `false` | Scale events |\n| `swipe` | `boolean` | `false` | Swipe events |\n\n<hr>\n## <a name=\"events\"></a> Events\n\nEvents are triggered on the target instance's element, unless otherwise stated.\n\n| Event | Description |\n| --- | --- |\n| `panstart` | Panning started |\n| `pan` | Panning |\n| `panend` | Panning ended |\n| `scalestart` | Scaling started |\n| `scale` | Scaling |\n| `scaleend` | Scaling ended |\n| `swipe` | Swipe |\n\n<hr>\n## <a name=\"methods\"></a> Methods\n\nMethods are publicly available to all active instances, unless otherwise stated.\n\n### defaults\n\nExtends plugin default settings; effects instances created hereafter.\n\n```javascript\n$.touch(\"defaults\", { ... });\n```\n\n#### Parameters\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| `options` | `object` | `{}` | New plugin defaults |\n\n### destroy\n\nRemoves plugin instance.\n\n```javascript\n$(\".target\").touch(\"destroy\");\n```\n\n<hr>\n## <a name=\"css\"></a> CSS\n\n| Class | Type | Description |\n| --- | --- | --- |\n| `.fs-touch-element` | `element` | Target Element |\n\n"}