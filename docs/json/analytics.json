{"main":["analytics.js"],"options":[{"name":"autoEvents","type":"boolean","default":"false","description":"Flag to bind auto-events to mailto, tel, files and external links"},{"name":"fileTypes","type":"regex","default":"","description":"File types for binding auto-events"},{"name":"eventCallback","type":"boolean","default":"false","description":"Flag to use event callbacks when navigating"},{"name":"eventTimeout","type":"int","default":"1000","description":"Event failure timeout"},{"name":"scrollDepth","type":"boolean","default":"false","description":"Flag to track scroll depth events"},{"name":"scrollStops","type":"int","default":"5","description":"Number of scroll increments to track"},{"name":"trackerName","type":"string","default":"'gaTracker'","description":"Custom tracker name"}],"events":[],"methods":[],"name":"Analytics","type":"utility","description":"A jQuery plugin for Google Universal Analytics Events.","dependencies":["jQuery","core.js","mediaquery.js"],"use":"### Basic\n\nTrack click events in Google Analytics by attaching a properly formed data attribute to any element. The data attribute should define at least the required values, category and action. Values should be comma separated:\n\n```markup\n<button data-analytics-event=\"category, action [, label] [, value]\">...</button>\n```\n\n### Advanced\n\nFire custom events by passing the event values directly to Analytics:\n\n```javascript\n$.analytics(category, action [, label] [, value]);\n```\n\nLearn more about <a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/events\" target=\"_blank\">Event Tracking with Universal Analytics</a>.\n\n### Scroll Depth\n\nTrack scroll depth by enabling the `scrollDepth` option at initialization. Change the target scroll increments by modifying the `scrollStops` option:\n\n```javascript\n$.analytics({\n\tscrollDepth: true,\n\tscrollStops: 10\n});\n```\n\n### Tag Manager Support\n\nTo track events using Google Tag Manager proper Tags, Triggers and Variables will need to be configured from the Tag Manager dashboard.\n\nFirst, create a new Trigger with the following properties:\n\n| Name | Event Type | Fire On |\n| -- | -- |\n| Analytics Event Trigger | Custom Event | `gaTriggerEvent` |\n\nNext, crate three new Data Layer Variables with the following properties:\n\n| Name | Variable Name |\n| -- | -- |\n| Analytics Event Category | `eventCategory` |\n| Analytics Event Action | `eventAction` |\n| Analytics Event Label | `eventLabel` |\n| Analytics Event Value | `eventValue` |\n\nFinally, create a new Google Universal Analytics tag named 'Analytics Events' with the following configuration:\n\n| Property | Value |\n| -- | -- |\n| Tracking ID | [Your Analytics ID] |\n| Track Type | Event |\n| Category | {{Analytics Event Category}} |\n| Action | {{Analytics Event Action}} |\n| Label | {{Analytics Event Label}} |\n| Value | {{Analytics Event Value}} |\n| Fire On | Analytics Event Trigger |\n\nPublish the new tag to view Analytics events pushed to the Google Analytics dashboard. \n\nNote: The [Google Analytics Debugger](https://chrome.google.com/webstore/detail/google-analytics-debugger/jnkmfdileelhofjcijamephohjechhna) extension helps to ensure events are being properly pushed. ","demo":"<!--\r\n<style>\r\n\tbody { position: relative; }\r\n\r\n\t.mark { border-bottom: 5px solid red; color: black; position: absolute; right: 0; text-align: right; width: 100px; }\r\n\t.mark:before { background: red; bottom: 0; content: ''; display: block; height: 50px; opacity: 0.5; position: absolute; width: 100%; }\r\n\t.mark_20  { bottom: 20%; }\r\n\t.mark_40  { bottom: 40%; }\r\n\t.mark_60  { bottom: 60%; }\r\n\t.mark_80  { bottom: 80%; }\r\n\t.mark_100 { bottom: 100%; }\r\n\r\n\t.padded { height: 2000px; }\r\n</style>\r\n\r\n<div class=\"mark mark_20\"></div>\r\n<div class=\"mark mark_40\"></div>\r\n<div class=\"mark mark_60\"></div>\r\n<div class=\"mark mark_80\"></div>\r\n<div class=\"mark mark_100\"></div>\r\n\r\n<div class=\"padded\"></div>\r\n-->"}