
@fs-grid-mixin-only:      false;

@fs-grid-class-container: fs-grid;
@fs-grid-class-row:       fs-row;
@fs-grid-class-cell:      fs-cell;
  @fs-grid-class-contained: -contained;
  @fs-grid-class-padded:    -padded;
  @fs-grid-class-first:     -first;
  @fs-grid-class-last:      -last;

@fs-grid-class-all:       fs-all;
@fs-grid-class-xs:        fs-xs;
@fs-grid-class-sm:        fs-sm;
@fs-grid-class-md:        fs-md;
@fs-grid-class-lg:        fs-lg;
@fs-grid-class-xl:        fs-xl;

@fs-grid-columns-sm:      3;
@fs-grid-columns-md:      6;
@fs-grid-columns-lg:      12;

@fs-grid-gap:             20px;
  @fs-grid-gutter:          1.0416666666666667%;

@fs-grid-width-xs:        300px;
@fs-grid-width-sm:        480px;
@fs-grid-width-md:        720px;
@fs-grid-width-lg:        960px;
@fs-grid-width-xl:        1200px;

@fs-grid-width-break-xs:  320px;
@fs-grid-width-break-sm:  500px;
@fs-grid-width-break-md:  740px;
@fs-grid-width-break-lg:  980px;
@fs-grid-width-break-xl:  1220px;

@fs-grid-mq-max-sm:       ~"max-width: "(@fs-grid-width-break-sm - 1px);
@fs-grid-mq-max-md:       ~"max-width: "(@fs-grid-width-break-md - 1px);
@fs-grid-mq-max-lg:       ~"max-width: "(@fs-grid-width-break-lg - 1px);
@fs-grid-mq-max-xl:       ~"max-width: "(@fs-grid-width-break-xl - 1px);

@fs-grid-mq-min-sm:       ~"min-width: "(@fs-grid-width-break-sm);
@fs-grid-mq-min-md:       ~"min-width: "(@fs-grid-width-break-md);
@fs-grid-mq-min-lg:       ~"min-width: "(@fs-grid-width-break-lg);
@fs-grid-mq-min-xl:       ~"min-width: "(@fs-grid-width-break-xl);


//-- Base

.@{fs-grid-class-container} {
  --fs-col-count: @fs-grid-columns-sm;
  --fs-col-start: 1;
  --fs-col-end: var(--fs-col-count);
  // --fs-gap: @fs-grid-gap;
}

//-- GRID

.@{fs-grid-class-row} {
  display: grid;
  grid-gap: var(--fs-gap);
  grid-template-columns: repeat(var(--fs-col-count), 1fr);

  //

  > .@{fs-grid-class-cell} {
    min-width: 0;
    grid-column-end: span var(--fs-col-end);
  }

}


//-- SIZES

// All

.fs_grid_row(@fs-grid-class-all, 0);

// SM

@media (@fs-grid-mq-max-md) {

  .fs_grid_row(@fs-grid-class-sm, @fs-grid-columns-sm);

  .fs_grid_builder(@fs-grid-class-sm, @fs-grid-columns-sm);
}

// XS

@media (@fs-grid-mq-max-sm) {

  .fs_grid_row(@fs-grid-class-xs, @fs-grid-columns-sm);

  .fs_grid_builder(@fs-grid-class-xs, @fs-grid-columns-sm);
}

// MD

@media (@fs-grid-mq-min-md) and (@fs-grid-mq-max-lg) {

  .fs_grid_row(@fs-grid-class-md, @fs-grid-columns-md);

  .fs_grid_builder(@fs-grid-class-md, @fs-grid-columns-md);
}

// LG

@media (@fs-grid-mq-min-lg) {

  .fs_grid_row(@fs-grid-class-lg, @fs-grid-columns-lg);

  .fs_grid_builder(@fs-grid-class-lg, @fs-grid-columns-lg);
}

// XL

@media (@fs-grid-mq-min-lg) {

  .fs_grid_row(@fs-grid-class-xl, @fs-grid-columns-lg);

  .fs_grid_builder(@fs-grid-class-xl, @fs-grid-columns-lg);
}


//-- MIXINS

//-- Row

.fs_grid_row(@size_class, @column_count) {

  .@{fs-grid-class-row} {

    & when (@column_count > 0) {
      --fs-col-count: @column_count;
      --fs-col-end: @column_count;
      // --fs-col-end: abs(@column_count + 1);

      > [class*="@{size_class}-from-"] {
      // > [class*="@{cell_class}-place"] {
        grid-column-start: var(--fs-col-start);
        grid-column-end: var(--fs-col-end);
      }
    }

    // Row Alignment

    &.@{size_class}-align-center {
      align-items: center;
    }

    &.@{size_class}-align-start {
      align-items: start;
    }

    &.@{size_class}-align-end {
      align-items: end;
    }

    // Row Justify

    &.@{size_class}-justify-center {
      justify-items: center;
    }

    &.@{size_class}-justify-start {
      justify-items: start;
    }

    &.@{size_class}-justify-end {
      justify-items: end;
    }
  }

  .@{fs-grid-class-cell} {
    // Cell Order

    &.@{size_class}@{fs-grid-class-first} {
      order: -1;
    }

    &.@{size_class}@{fs-grid-class-last} {
      order: 1;
    }

    // Cell Alignment

    &.@{size_class}-align-center {
      align-self: center;
    }

    &.@{size_class}-align-start {
      align-self: start;
    }

    &.@{size_class}-align-end {
      align-self: end;
    }

    // Cell Justify

    &.@{size_class}-justify-center {
      justify-self: center;
    }

    &.@{size_class}-justify-start {
      justify-self: start;
    }

    &.@{size_class}-justify-end {
      justify-self: end;
    }
  }

}


//-- Grid Builder

.fs_grid_builder(@class, @columns, @current:1) {
  // @total: total column count
  // @current: current column width

  // @total: (@columns * 2);
  @total: @columns;

  .fs_grid_rows(@class, @total);

  .fs_grid_columns_base(@class, @total, @current); // generate base

  .fs_grid_columns_from(@class, @total, @current); // generate from

  .fs_grid_columns_to(@class, @total, @current); // generate to

  .fs_grid_columns_span(@class, @total, @current); // generate span
}


//-- Row Counts

.fs_grid_rows(@class, @total, @current:1) when (@current <= @total) {

  .@{fs-grid-class-row}.@{class}-@{current} {
    --fs-col-count: @current;
    // --fs-col-end: @current;
    --fs-col-end: abs(@current + 1);
  }

  .fs_grid_rows(@class, @total, (@current + 1));
}


//-- Base Columns

.fs_grid_columns_base(@class, @total, @current:1) when (@current <= @total) {

  .@{fs-grid-class-cell}.@{class}-@{current} {
    --fs-col-end: @current;
  }

  .fs_grid_columns_base(@class, @total, (@current + 1));
}


//-- 'From' Columns (from-x)

.fs_grid_columns_from(@class, @total, @current:1) when (@current <= @total) {

  [class*="@{class}-from-@{current}-"] {
    --fs-col-start: @current;
  }

  .fs_grid_columns_from(@class, @total, (@current + 1)); // loop
}


//-- 'To' Columns (from-x-to-x)

.fs_grid_columns_to(@class, @total, @current:1) when (@current <= @total) {
  // @total: total column width
  // @current: current column offset

  .fs_grid_columns_to_loop(@class, @total, @current); // generate groups

  .fs_grid_columns_to(@class, (@total - 1), 1); // loop
}

.fs_grid_columns_to_loop(@class, @max, @current:1) when (@current <= @max) {

  .@{fs-grid-class-cell}.@{class}-from-@{current}-to-@{max} {
    // --fs-col-end: @max;
    --fs-col-end: abs(@max + 1);
  }

  .fs_grid_columns_to_loop(@class, @max, (@current + 1)); // loop
}


//-- 'Span' Columns (from-x-span-x)

.fs_grid_columns_span(@class, @total, @current:1) when (@current <= @total) {
  // @total: total column width
  // @current: current column offset

  @max: (@total - (@current - 1));

  .fs_grid_columns_span_loop(@class, @total, @max, 1); // generate groups

  .fs_grid_columns_span(@class, @total, (@current + 1)); // loop
}

.fs_grid_columns_span_loop(@class, @total, @max, @current:1) when ((@current + @max - 1) <= @total) {
  // @total: total column width
  // @max: max span width
  // @current: current column offset

  .@{fs-grid-class-cell}.@{class}-from-@{current}-span-@{max} {
    --fs-col-end: span @max;
  }

  .fs_grid_columns_span_loop(@class, @total, @max, (@current + 1)); // loop
}
